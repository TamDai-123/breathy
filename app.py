from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)
import requests
import os
import unicodedata
import re

# ---------------- CONFIG ----------------
CHANNEL_ACCESS_TOKEN = os.getenv("CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("CHANNEL_SECRET")
AQICN_API = os.getenv("AQICN_API")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)
app = Flask(__name__)

# ---------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ----------------
def get_aqi(city):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ AQI ‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á"""
    url = f"https://api.waqi.info/feed/{city}/?token={AQICN_API}"
    try:
        r = requests.get(url).json()
        if r.get('status') == 'ok':
            return r['data']['aqi']
    except requests.exceptions.RequestException as e:
        print(f"Error fetching AQI: {e}")
    return None

def assess_risk(age, smoker, family_history, symptoms, aqi):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö"""
    score = 0
    if age < 12 or age > 60:
        score += 1
    if smoker:
        score += 2
    if family_history:
        score += 2
    score += len(symptoms)
    if aqi is not None and aqi > 100:
        score += 2

    if score <= 2:
        level = "‡∏ï‡πà‡∏≥"
        advice = "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    elif score <= 5:
        level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        advice = "‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏û‡∏Å‡∏¢‡∏≤ inhaler, ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å, ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ù‡∏∏‡πà‡∏ô/‡∏Ñ‡∏ß‡∏±‡∏ô"
    else:
        level = "‡∏™‡∏π‡∏á"
        advice = "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô"
    return level, advice

# ---------------- QuickReply ----------------
def get_smoker_qr():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á QuickReply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà"""
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:y")),
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:n"))
    ])

def get_family_qr():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á QuickReply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß"""
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏°‡∏µ", text="family:y")),
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏°‡∏µ", text="family:n"))
    ])

def get_symptoms_qr():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á QuickReply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"""
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏≠", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÑ‡∏≠")),
        QuickReplyButton(action=MessageAction(label="‡∏à‡∏≤‡∏°", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏à‡∏≤‡∏°")),
        QuickReplyButton(action=MessageAction(label="‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î")),
        QuickReplyButton(action=MessageAction(label="‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢")),
        QuickReplyButton(action=MessageAction(label="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="symptom:done"))
    ])

def get_city_qr():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á QuickReply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á"""
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà")),
        QuickReplyButton(action=MessageAction(label="‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï")),
        QuickReplyButton(action=MessageAction(label="‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô"))
    ])

# ---------------- Webhook ----------------
user_data = {}  # ‡πÄ‡∏Å‡πá‡∏ö session ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@app.route("/callback", methods=['POST'])
def callback():
    """Handle Callback ‡∏à‡∏≤‡∏Å Line API"""
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ---------------- Event Handler ----------------
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    """Handle ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤"""
    raw_text = event.message.text
    text = unicodedata.normalize('NFC', raw_text).strip()
    user_id = event.source.user_id

    print(f"[DEBUG] user_id={user_id}, text={repr(text)}")

    # ---------------- RESET ----------------
    if re.search(r'\b(‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï|reset)\b', text, re.IGNORECASE):
        user_data.pop(user_id, None)
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
        )
        return

    # ---------------- START ----------------
    if re.search(r'^\s*‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô\s*$', text):
        user_data[user_id] = {
            "step": "age",
            "age": None,
            "smoker": None,
            "family": None,
            "symptoms": []
        }
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç):")
        )
        return

    # ---------------- PROCESS STEPS ----------------
    if user_id not in user_data:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
        )
        return
        
    step = user_data[user_id]["step"]

    # ----- STEP: AGE -----
    if step == "age":
        if text.isdigit():
            user_data[user_id]["age"] = int(text)
            user_data[user_id]["step"] = "smoker"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", quick_reply=get_smoker_qr())
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            )
        return

    # ----- STEP: SMOKER -----
    if step == "smoker":
        if text == "smoker:y" or re.search(r'‡∏™‡∏π‡∏ö', text):
            user_data[user_id]["smoker"] = True
            user_data[user_id]["step"] = "family"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", quick_reply=get_family_qr())
            )
        elif text == "smoker:n" or re.search(r'‡πÑ‡∏°‡πà\s*‡∏™‡∏π‡∏ö', text):
            user_data[user_id]["smoker"] = False
            user_data[user_id]["step"] = "family"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", quick_reply=get_family_qr())
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ", quick_reply=get_smoker_qr())
            )
        return

    # ----- STEP: FAMILY -----
    if step == "family":
        if text == "family:y" or re.search(r'‡∏°‡∏µ', text):
            user_data[user_id]["family"] = True
            user_data[user_id]["step"] = "symptoms"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏î '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à):",
                    quick_reply=get_symptoms_qr()
                )
            )
        elif text == "family:n" or re.search(r'‡πÑ‡∏°‡πà\s*‡∏°‡∏µ', text):
            user_data[user_id]["family"] = False
            user_data[user_id]["step"] = "symptoms"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏î '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à):",
                    quick_reply=get_symptoms_qr()
                )
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ", quick_reply=get_family_qr())
            )
        return

    # ----- STEP: SYMPTOMS -----
    if step == "symptoms":
        if text.startswith("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:"):
            symptom = text.replace("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:", "").strip()
            if symptom and symptom not in user_data[user_id]["symptoms"]:
                user_data[user_id]["symptoms"].append(symptom)
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text=f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {symptom}\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à:",
                    quick_reply=get_symptoms_qr()
                )
            )
        elif text == "symptom:done" or re.search(r'‡∏ñ‡∏±‡∏î‡πÑ‡∏õ|‡πÄ‡∏™‡∏£‡πá‡∏à', text):
            user_data[user_id]["step"] = "city"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ:", quick_reply=get_city_qr())
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'", quick_reply=get_symptoms_qr())
            )
        return

    # ----- STEP: CITY -----
    if step == "city":
        city_mapping = {
            "‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û",
            "‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
            "‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
            "‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô"
        }
        
        city = None
        if text in city_mapping:
            city = city_mapping[text]
        elif re.search(r'‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û|‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà|‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï|‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', text):
            city = text.replace("‡πÄ‡∏°‡∏∑‡∏≠‡∏á:", "").strip()

        if city:
            data = user_data.get(user_id)
            if not data:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'")
                )
                return

            aqi = get_aqi(city)
            level, advice = assess_risk(data["age"], data["smoker"], data["family"], data["symptoms"], aqi)

            reply = f"""
üìå ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î
‡∏≠‡∏≤‡∏¢‡∏∏: {data['age']}
‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: {"‡πÉ‡∏ä‡πà" if data['smoker'] else "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}
‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß: {"‡∏°‡∏µ" if data['family'] else "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {', '.join(data['symptoms']) if data['symptoms'] else "‡πÑ‡∏°‡πà‡∏°‡∏µ"}

üå´ AQI ({city}): {aqi if aqi is not None else "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ"}

‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {level}
üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {advice}
"""
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
            user_data.pop(user_id, None)  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ú‡∏•
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", quick_reply=get_city_qr())
            )
        return