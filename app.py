from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, QuickReply, QuickReplyButton, MessageAction
import requests
import os

# ---------------- CONFIG ----------------
CHANNEL_ACCESS_TOKEN = os.getenv("Zv8W8x3YgffzXnnI95dJsfIvrU0on5agdFuQ/0OvK4Wf1KBLADD4MOD/FLlXPo3D5tAi6qwHLfOWaHeuTut9LrUuIxRhiBQqRp2EQbv9qUr9ilTXuHwNctYXH/ccpdSRzyu0Z6gJy6Y/Kz3Wg9SKXwdB04t89/1O/w1cDnyilFU=")
CHANNEL_SECRET = os.getenv("72873ed1e2c05e7ea560e617be24be08")
AQICN_API = os.getenv("96cff56bd643945ff35d0343b77ccb7419c3a820")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)
app = Flask(__name__)

# ---------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ----------------
def get_aqi(city):
    url = f"https://api.waqi.info/feed/{city}/?token={AQICN_API}"
    r = requests.get(url).json()
    if r['status'] == 'ok':
        return r['data']['aqi']
    return None

def assess_risk(age, smoker, family_history, symptoms, aqi):
    score = 0
    if age < 12 or age > 60:
        score += 1
    if smoker:
        score += 2
    if family_history:
        score += 2
    score += len(symptoms)
    if aqi is not None and aqi > 100:
        score += 2

    if score <= 2:
        level = "‡∏ï‡πà‡∏≥"
        advice = "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    elif score <= 5:
        level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        advice = "‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏û‡∏Å‡∏¢‡∏≤ inhaler, ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å, ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ù‡∏∏‡πà‡∏ô/‡∏Ñ‡∏ß‡∏±‡∏ô"
    else:
        level = "‡∏™‡∏π‡∏á"
        advice = "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô"
    return level, advice

# ---------------- Webhook ----------------
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ---------------- Event Handler ----------------
user_data = {}

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.lower()
    user_id = event.source.user_id

    if text.startswith("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"):
        user_data[user_id] = {"symptoms":[], "age": None, "smoker": None, "family": None}
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç):"))
        return

    if user_data.get(user_id) and user_data[user_id]["age"] is None:
        try:
            user_data[user_id]["age"] = int(text)
            qr = QuickReply(items=[
                QuickReplyButton(action=MessageAction(label="‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:y")),
                QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:n"))
            ])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", quick_reply=qr))
        except:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≤‡∏¢‡∏∏"))
        return

    if user_data.get(user_id) and (text.startswith("smoker:") or text.startswith("family:")):
        if text.startswith("smoker:"):
            user_data[user_id]["smoker"] = text.split(":")[1] == "y"
            qr = QuickReply(items=[
                QuickReplyButton(action=MessageAction(label="‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î", text="family:y")),
                QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", text="family:n"))
            ])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß?", quick_reply=qr))
        elif text.startswith("family:"):
            user_data[user_id]["family"] = text.split(":")[1] == "y"
            symptoms_qr = QuickReply(items=[
                QuickReplyButton(action=MessageAction(label="‡πÑ‡∏≠", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÑ‡∏≠")),
                QuickReplyButton(action=MessageAction(label="‡∏à‡∏≤‡∏°", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏à‡∏≤‡∏°")),
                QuickReplyButton(action=MessageAction(label="‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î")),
                QuickReplyButton(action=MessageAction(label="‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å")),
                QuickReplyButton(action=MessageAction(label="‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢"))
            ])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á):", quick_reply=symptoms_qr))
        return

    if text.startswith("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:"):
        symptom = text.replace("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:","")
        user_data[user_id]["symptoms"].append(symptom)
        city_qr = QuickReply(items=[
            QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û")),
            QuickReplyButton(action=MessageAction(label="‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà")),
            QuickReplyButton(action=MessageAction(label="‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï")),
            QuickReplyButton(action=MessageAction(label="‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô"))
        ])
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ:", quick_reply=city_qr))
        return

    if text.startswith("‡πÄ‡∏°‡∏∑‡∏≠‡∏á:"):
        city = text.replace("‡πÄ‡∏°‡∏∑‡∏≠‡∏á:","")
        data = user_data.get(user_id)
        if data:
            age = data["age"]
            smoker = data["smoker"]
            family_history = data["family"]
            symptoms = data["symptoms"]

            aqi = get_aqi(city)
            level, advice = assess_risk(age, smoker, family_history, symptoms, aqi)

            reply = f"""
üìå ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î
‡∏≠‡∏≤‡∏¢‡∏∏: {age}, ‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: {smoker}, ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß: {family_history}
‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {', '.join(symptoms)}

üå´ AQI: {aqi if aqi is not None else '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ'}

‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {level}
üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {advice}
"""
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
            user_data[user_id] = {"symptoms":[], "age": None, "smoker": None, "family": None}
        return

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
