from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)
import requests
import os
import unicodedata
import Levenshtein
import redis
import json

# ---------------- CONFIG ----------------
CHANNEL_ACCESS_TOKEN = os.getenv("CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("CHANNEL_SECRET")
AQICN_API = os.getenv("AQICN_API")
REDIS_URL = os.getenv("REDIS_URL")  # ‡πÄ‡∏ä‡πà‡∏ô redis://:password@host:port

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)
app = Flask(__name__)

# ---------------- Redis ----------------
r = redis.from_url(REDIS_URL, decode_responses=True)

# ---------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ----------------
def get_aqi(city):
    url = f"https://api.waqi.info/feed/{city}/?token={AQICN_API}"
    try:
        r_api = requests.get(url).json()
        if r_api.get('status') == 'ok':
            return r_api['data']['aqi']
    except Exception as e:
        print(f"Error fetching AQI: {e}")
    return None

def assess_risk(age, smoker, family_history, symptoms, aqi):
    score = 0
    if age < 12 or age > 60:
        score += 1
    if smoker:
        score += 2
    if family_history:
        score += 2
    score += len(symptoms)
    if aqi is not None and aqi > 100:
        score += 2

    if score <= 2:
        return "‡∏ï‡πà‡∏≥", "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    elif score <= 5:
        return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏û‡∏Å‡∏¢‡∏≤ inhaler, ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å, ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ù‡∏∏‡πà‡∏ô/‡∏Ñ‡∏ß‡∏±‡∏ô"
    else:
        return "‡∏™‡∏π‡∏á", "‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô"

def is_close_match(user_text, target_keywords, threshold=2):
    for keyword in target_keywords:
        if Levenshtein.distance(user_text, keyword) <= threshold:
            return True
    return False

# ---------------- QuickReply ----------------
def get_smoker_qr():
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:y")),
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", text="smoker:n"))
    ])

def get_family_qr():
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏°‡∏µ", text="family:y")),
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏°‡∏µ", text="family:n"))
    ])

def get_symptoms_qr():
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", text="symptom:done")),
        QuickReplyButton(action=MessageAction(label="‡πÑ‡∏≠", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÑ‡∏≠")),
        QuickReplyButton(action=MessageAction(label="‡∏à‡∏≤‡∏°", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏à‡∏≤‡∏°")),
        QuickReplyButton(action=MessageAction(label="‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡∏µ‡πâ‡∏î")),
        QuickReplyButton(action=MessageAction(label="‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", text="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢"))
        
    ])

def get_city_qr():
    return QuickReply(items=[
        QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£")),
        QuickReplyButton(action=MessageAction(label="‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ")),
        QuickReplyButton(action=MessageAction(label="‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ")),
        QuickReplyButton(action=MessageAction(label="‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà")),
        QuickReplyButton(action=MessageAction(label="‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ")),
        QuickReplyButton(action=MessageAction(label="‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤")),
        QuickReplyButton(action=MessageAction(label="‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ")),
        QuickReplyButton(action=MessageAction(label="‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤")),
        QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢")),
        QuickReplyButton(action=MessageAction(label="‡∏™‡∏á‡∏Ç‡∏•‡∏≤", text="‡πÄ‡∏°‡∏∑‡∏≠‡∏á:‡∏™‡∏á‡∏Ç‡∏•‡∏≤")),
    ])

# ---------------- Mapping ‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ----------------
city_map = {
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": "Bangkok",
    "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ": "Chonburi",
    "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ": "Kanchanaburi",
    "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": "Phuket",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": "Chiang Mai",
    "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå": "Prachuap Khiri Khan",
    "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ": "Phetchaburi",
    "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤": "Ayutthaya",
    "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ": "Surat Thani",
    "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤": "Nakhon Ratchasima",
    "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà": "Krabi",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢": "Chiang Rai",
    "‡∏™‡∏á‡∏Ç‡∏•‡∏≤": "Songkhla"
}

# ---------------- Webhook ----------------
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ---------------- Event Handler ----------------
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    raw_text = event.message.text
    text = unicodedata.normalize('NFC', raw_text).strip().lower()
    user_id = event.source.user_id

    # ---------------- RESET ----------------
    if is_close_match(text, ["‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï", "reset"]):
        r.delete(user_id)
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞")
        )
        return

    # ---------------- START ----------------
    if is_close_match(text, ["‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ì"]):
        user_data = {"step":"age","age":None,"smoker":None,"family":None,"symptoms":[]}
        r.set(user_id, json.dumps(user_data))
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞:"))
        return

    # ---------------- LOAD SESSION ----------------
    data_json = r.get(user_id)
    if not data_json:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞"))
        return
    user_data = json.loads(data_json)
    step = user_data.get("step")

    # ----- STEP AGE -----
    if step=="age":
        if text.isdigit():
            user_data["age"]=int(text)
            user_data["step"]="smoker"
            r.set(user_id, json.dumps(user_data))
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", quick_reply=get_smoker_qr()))
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞"))
        return

    # ----- STEP SMOKER -----
    if step == "smoker":
        if text in ["smoker:y", "‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", "‡πÉ‡∏ä‡πà", "‡∏™‡∏π‡∏ö"]:
            user_data["smoker"] = True
        elif text in ["smoker:n", "‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", "‡πÑ‡∏°‡πà", "‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ö"]:
            user_data["smoker"] = False
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", quick_reply=get_smoker_qr())
            )
            return
        user_data["step"] = "family"
        r.set(user_id, json.dumps(user_data))
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", quick_reply=get_family_qr())
        )
        return

    # ----- STEP FAMILY -----
    if step == "family":
        if text in ["family:y", "‡∏°‡∏µ", "‡πÉ‡∏ä‡πà"]:
            user_data["family"] = True
        elif text in ["family:n", "‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÑ‡∏°‡πà"]:
            user_data["family"] = False
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", quick_reply=get_family_qr())
            )
            return
        user_data["step"] = "symptoms"
        r.set(user_id, json.dumps(user_data))
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(
                text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞:",
                quick_reply=get_symptoms_qr()
            )
        )
        return

    # ----- STEP SYMPTOMS -----
    if step=="symptoms":
        if text.startswith("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:"):
            symptom=text.replace("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£:","").strip()
            if symptom and symptom not in user_data["symptoms"]:
                user_data["symptoms"].append(symptom)
            r.set(user_id, json.dumps(user_data))
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {symptom}\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞: ", quick_reply=get_symptoms_qr()))
            return
        elif is_close_match(text, ["symptom:done","‡∏ñ‡∏±‡∏î‡πÑ‡∏õ","‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"]):
            user_data["step"]="city"
            r.set(user_id, json.dumps(user_data))
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞:", quick_reply=get_city_qr()))
            return
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞", quick_reply=get_symptoms_qr()))
            return

    # ----- STEP CITY -----
    if step=="city":
        cities=list(city_map.keys())
        city=None
        for c in cities:
            if c in text:
                city=c
                break
        if not city:
            closest=min(cities,key=lambda x: Levenshtein.distance(text,x.lower()))
            if Levenshtein.distance(text,closest.lower())<=2:
                city=closest
        if city:
            aqi=get_aqi(city_map.get(city, city))
            level, advice=assess_risk(user_data["age"],user_data["smoker"],user_data["family"],user_data["symptoms"],aqi)
            reply=f"""
üìå ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î
‡∏≠‡∏≤‡∏¢‡∏∏: {user_data['age']}
‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà: {"‡πÉ‡∏ä‡πà" if user_data['smoker'] else "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}
‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß: {"‡∏°‡∏µ" if user_data['family'] else "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {', '.join(user_data['symptoms']) if user_data['symptoms'] else "‡πÑ‡∏°‡πà‡∏°‡∏µ"}

üå´ AQI ({city}): {aqi if aqi is not None else "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ"}

‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {level}
üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {advice}
"""
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
            r.delete(user_id)  # ‡∏•‡∏ö session ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ú‡∏•
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", quick_reply=get_city_qr()))
        return
